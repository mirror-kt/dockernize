name: Build image
description: Build a docker image
inputs:
  repository:
    description: Git repository url
    required: true
  imageName:
    description: Image name
    required: true
  context:
    description: Docker context
    required: true
  dockerfile:
    description: Dockerfile path
    required: false
  platforms:
    description: List of target platforms for build
    required: false

runs:
  using: composite
  steps:
    - name: Get latest image version
      id: get-latest-image
      shell: bash
      run: echo "latest_image_version=$(docker run --rm quay.io/skopeo/stable:latest list-tags docker://ghcr.io/mirror-kt/${{ inputs.imageName }} | jq -r '.Tags | sort | last')" >> $GITHUB_OUTPUT
    - name: Checkout source repository
      shell: bash
      run: git clone --depth=1 ${{ inputs.repository }} "${{ inputs.context }}/source"
    - name: Get latest tag in source repository
      id: get-latest-tag
      shell: bash
      run: |
        cd "${{ inputs.context }}/source"
        # Get a latest tag in the shape of semver.
        for ref in $(git for-each-ref --sort=-creatordate --format '%(refname)' refs/tags); do
          tag="${ref#refs/tags/}"
          if echo "${tag}" | grep -Eq '^v?([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$'; then
            latest_tag="${tag}"
            break
          fi
        done
        echo "latest_tag=v${latest_tag#v}" >> $GITHUB_OUTPUT
        echo "latest_tag_commit=$(git rev-parse --short $latest_tag)" >> $GITHUB_OUTPUT
        cd $GITHUB_WORKSPACE
    - name: Debug
      shell: bash
      run: |
        echo $LATEST_IMAGE_VERSION
        echo $LATEST_TAG_VERSION
        echo ${{ inputs.context }}/source
      env:
        LATEST_IMAGE_VERSION: ${{ steps.get-latest-image.outputs.latest_image_version }}
        LATEST_TAG_VERSION: ${{ steps.get-latest-tag.outputs.latest_tag }}
    - name: Checkout the tag in source repository
      if: ${{ steps.get-latest-image.outputs.latest_image_version }} != ${{ steps.get-latest-tag.outputs.latest_tag }}
      shell: bash
      run: |
        cd "${{ inputs.context }}/source"
        git checkout -b ${{ steps.get-latest-tag.outputs.latest_tag }}
        cd $GITHUB_WORKSPACE
    - uses: docker/setup-qemu-action@v2
      if: ${{ steps.get-latest-image.outputs.latest_image_version }} != ${{ steps.get-latest-tag.outputs.latest_tag }}
    - uses: docker/setup-buildx-action@v2
      if: ${{ steps.get-latest-image.outputs.latest_image_version }} != ${{ steps.get-latest-tag.outputs.latest_tag }}
    - uses: docker/login-action@v3
      if: ${{ steps.get-latest-image.outputs.latest_image_version }} != ${{ steps.get-latest-tag.outputs.latest_tag }}
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ github.token }}

    - shell: bash
      run: docker build -t ${{ inputs.imageName }}:${{ steps.get-latest-tag.outputs.latest_tag_commit }} ${{ inputs.context }} -f ${{ inputs.dockerfile }}
    - uses: aquasecurity/trivy-action@0.8.0
      with:
        image-ref: ${{ inputs.imageName }}:${{ steps.get-latest-tag.outputs.latest_tag_commit }}
        format: "sarif"
        security-checks: vuln
        output: "trivy-results.sarif"
    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: "trivy-results.sarif"

    - uses: docker/build-push-action@v3
      if: ${{ steps.get-latest-image.outputs.latest_image_version }} != ${{ steps.get-latest-tag.outputs.latest_tag }}
      with:
        context: ${{ inputs.context }}
        file: ${{ inputs.dockerfile }}
        push: true
        labels: |
          org.opencontainers.image.source = https://github.com/${{ github.repository }}
          org.opencontainers.image.revision = ${{ steps.get-latest-tag.outputs.latest_tag_commit }}
        tags: |
          ghcr.io/mirror-kt/${{ inputs.imageName }}:${{ steps.get-latest-tag.outputs.latest_tag }}
          ghcr.io/mirror-kt/${{ inputs.imageName }}:${{ steps.get-latest-tag.outputs.latest_tag_commit }}
          ghcr.io/mirror-kt/${{ inputs.imageName }}:latest
        platforms: ${{ inputs.platforms }}
        build-args: VERSION = ${{ steps.get-latest-tag.outputs.latest_tag }}
